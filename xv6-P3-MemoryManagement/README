Colin Samplawski
Sam Mergendahl
NetID: csamplawski
NetID: smergendahl
CS Login: samplawski
CS Login: mergenda
CS 537 Fall 2015 DIS 302

Null Pointer Part:
We made the user address space start at address 0x1000 instead of 0x0. That way
if a user process tried to dereference a NULL pointer, they would be attempting to
read memory at address 0x0. Since this address is no longer in the user address
space, the kernel will kill the process. We did this editing the Makefile for user
processes so the code is loaded in at address 0x1000. Then a small change is needed
in exec.c in order to start loading the memory there. To make sure that a syscall
can handle a null pointer, we added a function that verifies the addresses that
are passed to fetchint and fetchstr, and returns -1 if the address is outside the
user address space.

Stack Part:
To move the stack to the bottom we just changed the call to allocuvm in exec that 
was there to build stack to alloc memory at bottom of the address space instead of
after the code portion of memory. Then some code in copyuvm needed to be changed 
in order to copy this new stack arrangement correctly. 

We added to fields to proc.h in order to keep track of the size of the heap and 
stack, as well as copy those fields in when fork is called. Using these fields,
we were able to keep track of the sizes of the heap and stack to insure that 
would never grow into each other. We did it so that there is invalid memory 
underneath the heap that moves down as the heap grows. If the stack tries to
grow into this area, the process is killed.

In order to grow the stack as a process needs, we added code to be ran after a page fault. 
This happens in trap.c, so at a page fault, we attempt to alloc a page worth of
memory for the stack. If that can't be done, then there isn't enough memory left,
so the process is just killed.

User programs for testing:
null.c - Simply dereferences a NULL pointer. Should seg fault

null-syscall.c - Passes a NULL pointer to open(), then prints the return 
value of open(), which should be -1.

badaddress-syscall.c - A integer is created on the heap, and a pointer to an  address below 
the address of the new int is passed to open(). The return value is then printed,
which should be -1.

small-stack.c - A few ints are allocated on the stack by a function, and their addresses
are then printed out (in decimal).

stack-growth.c - A few ints are allocated on the stack by a series of functions, 
and their addresses are then printed out (in decimal). These addresses should
show that more than one page is being used.

fault.c - A integer is created on the heap, and at an address below the address of 
the new int, we attempt to access memory there. This will cause a seg fault.

malloc.c - A few ints are created on the heap, using a malloc. And then their addresses
are printed out (in decimal).

overcommit-stack.c - We wrote a function that recursively calculates the nth 
Fibonacci number. We passed it a very high value for n (100000). This causes 
many, many stack frames to be made for the recursive calls to the function.
Then a seg fault occurs.

overcommit-heap.c - This program has an infinite loop that allocates  an int on the
heap at every iteration. We check the return value until it is NULL (meaning no more
memory is available), and print anerror and exit.
